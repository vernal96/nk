!function(t){"use strict";var e={name:"Pagination",props:{currentPage:{type:Number,required:!0},pageSize:{type:Number,required:!0},elementCount:{type:Number,required:!0}},data:function(){return{maxPage:5,lang:{start:BX.message.PAGINATION_START,end:BX.message.PAGINATION_END}}},computed:{pageCount:function(){return this.elementCount<this.pageSize?0:Math.ceil(this.elementCount/this.pageSize)},pages:function(){for(var t=this.currentPage,e=[t],n=Math.min(this.pageCount,this.maxPage),i=!1,a=1;e.length<n;){var o=t+(i?a:0-a);i&&a++,i=!i,o>0&&o<=this.pageCount&&e.push(o)}return e.sort((function(t,e){return t-e})),e},hidePrev:function(){return 1===this.currentPage},hideNext:function(){return this.currentPage===this.pageCount}},emits:["onChangePage"],methods:{goPage:function(t){this.$emit("onChangePage",t)},goStart:function(){this.hidePrev||this.goPage(1)},goEnd:function(){this.hideNext||this.goPage(this.pageCount)},goPrev:function(){this.hidePrev||this.goPage(this.currentPage-1)},goNext:function(){this.hideNext||this.goPage(this.currentPage+1)}},template:'\n    <div class="pagination" v-if="pageCount">\n        <button class="pagination__item" :class="{\'pagination__item--closed\': hidePrev}" @click="goStart">{{ lang.start }}</button>\n        <button class="pagination__arrow pagination__arrow--prev" :class="{\'pagination__arrow--closed\': hidePrev}" @click="goPrev"></button>\n        <button \n        class="pagination__item"\n        :class="{\'pagination__item--active\': pageNum === currentPage}"\n        v-for="pageNum in pages"\n        @click="goPage(pageNum)"\n        >\n        {{ pageNum }}\n        </button>\n        <button class="pagination__arrow pagination__arrow--next" :class="{\'pagination__arrow--closed\': hideNext}" @click="goNext"></button>\n        <button class="pagination__item" :class="{\'pagination__item--closed\': hideNext}" @click="goEnd">{{ lang.end }}</button>\n    </div>\n    <div v-else></div>\n'};t.Pagination=e}(this.DK=this.DK||{});
